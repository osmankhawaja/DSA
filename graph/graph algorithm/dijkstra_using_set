#include<bits/stdc++.h>
using namespace std;
const int N=1e3;
const int inf=1e9;

vector<pair<int, int>>g[N];
int v,e;

///time complexity: O(v + e log(v))

void dijkstra()
{
    vector<int>vis(N, 0);
    vector<int>dis(N, inf);

    set<pair<int, int>> st;//{wt, node}

    st.insert({0, 1});
    dis[1]=0;

    while(st.size() > 0)
    {
        auto node=*st.begin();
        int wt=node.first;
        int v=node.second;
        st.erase(st.begin());

        if(vis[v]) continue;
        vis[v]=1;

        for(auto child : g[v])
        {
            int vertex=child.first;
            int cost=child.second;
            if(dis[v] + cost < dis[vertex])
            {
                dis[vertex]=dis[v] + cost;
                st.insert({dis[vertex], vertex});
            }
        }
    }
    for(int i=1; i<=v; i++)
    {
        cout<<dis[i]<<" ";
    }
}

int main()
{
    cin>>v>>e;
    for(int i=0; i<e; i++)
    {
        int x, y, wt;
        cin>>x >>y >>wt;
        g[x].push_back({y, wt});
    }
    dijkstra();
}
