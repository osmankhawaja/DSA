#include<bits/stdc++.h>
using namespace std;

const int N=1e3;
int parent[N], sz[N];

//minimum spanning tree

void make(int v)
{
    parent[v]=v;
}

int find(int v)
{
    if(parent[v] == v)
     return parent[v];
    return find(parent[v]);
}

void Union(int u, int v)
{
    u=find(u);
    v=find(v);
    if(u != v)
     parent[v]=u;
}

int main()
{
    int v,e;
    cin>>v>>e;
    for(int i=1; i<=v; i++)
    {
        make(i);
    }
    vector<pair<int, pair<int, int>>> edges;
    for(int i=0; i<e; i++)
    {
        int x,y,wt;
        cin>>x>>y>>wt;
        edges.push_back({wt, {x, y}});
    }
    sort(edges.begin(), edges.end());
    int total_wt=0;
    for(auto i: edges)
    {
        int wt=i.first;
        int u=i.second.first;
        int v=i.second.second;
        if(find(u) == find(v)) continue;

        Union(u, v);
        cout<<u<<" "<<v<<endl;
        total_wt +=wt;
    }
    cout<<total_wt;
}
