l #include<bits/stdc++.h>
using namespace std;
const int N=1e3;
bool vis[N];

void dfs(int vertex, vector<int>g[], stack<int>& st)
{
    vis[vertex]=true;
    for(auto child : g[vertex])
    {
        if(vis[child]) continue;

        dfs(child, g, st);
    }
    st.push(vertex);
}
//topologial sort: In a topological sort, for every directed edge u -> v,
//   u must come before v in the ordering.
int main()
{
    int v,e;
    cin>>v>>e;
    vector<int>g[e+10];
    for(int i=0; i<e; i++)
    {
        int x,y;
        cin>>x>>y;
        g[x].push_back(y);
    }
    stack<int>st;
    for(int i=0; i<e; i++)
    {
        if(!vis[i])
         dfs(i, g, st);
    }
    while(!st.empty())
    {
        cout<<st.top()<<" ";
        st.pop();
    }
}
